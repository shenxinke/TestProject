package com.yst.tianyimember.fragment;

import android.content.Context;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.ListView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.scwang.smartrefresh.layout.SmartRefreshLayout;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.listener.OnLoadmoreListener;
import com.scwang.smartrefresh.layout.listener.OnRefreshListener;
import com.yst.tianyimember.R;
import com.yst.tianyimember.TianyiApplication;
import com.yst.tianyimember.adapter.AbstractCommonAdapter;
import com.yst.tianyimember.adapter.CommonViewHolder;
import com.yst.tianyimember.base.BaseFragment;
import com.yst.tianyimember.bean.ConsultReplyBean;
import com.yst.tianyimember.callbacks.AbstractConsultReplyCallBack;
import com.yst.tianyimember.config.Const;
import com.yst.tianyimember.config.Constants;
import com.yst.tianyimember.dialog.ReplyDialog;
import com.yst.tianyimember.utils.MyLog;
import com.yst.tianyimember.utils.SignUtils;
import com.yst.tianyimember.utils.ToastUtils;
import com.yst.tianyimember.utils.Utils;
import com.yst.tianyimember.view.roundedimageview.RoundedImageView;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import okhttp3.Call;
import okhttp3.Request;

/**
 * 咨询回复列表
 *
 * @author luxuchang
 * @version 3.2.1
 * @date 2017/9/21.
 */
public class ConsultReplyFragment extends BaseFragment{

    @BindView(R.id.lv_consult_reply)
    ListView lvConsultReply;
    @BindView(R.id.smartRefreshLayout)
    SmartRefreshLayout smartRefreshLayout;
    @BindView(R.id.tv_empty)
    TextView empty;

    private AbstractCommonAdapter<ConsultReplyBean.ContentBean> adapter;
    private List<ConsultReplyBean.ContentBean> datas = new ArrayList<>();
    private int page = 1;
    private int rows = 10;
    private ReplyDialog dialog = null;
    private boolean isHunter;
    private int userType;
    private boolean isRefresh = true;

    @Override
    public int bindLayout() {
        return R.layout.fragment_consult_reply;
    }

    @Override
    public void initData() {

        if (getArguments() != null) {
            isHunter = getArguments().getBoolean("isHunter", false);
        }

        if (isHunter) {
            userType = 1;
        } else {
            userType = 0;
        }
        getData();
        updateUnReadMessageNum();
        smartRefreshLayout.setOnRefreshListener(new OnRefreshListener() {
            @Override
            public void onRefresh(RefreshLayout refreshlayout) {
                page = 1;
                isRefresh = true;
                getData();
            }
        });
        smartRefreshLayout.setOnLoadmoreListener(new OnLoadmoreListener() {
            @Override
            public void onLoadmore(RefreshLayout refreshlayout) {
                if (datas.size() < 1) {
                    page = 1;
                } else {
                    page++;
                }
                isRefresh = false;
                getData();
            }
        });


        adapter = new AbstractCommonAdapter<ConsultReplyBean.ContentBean>(getContext(), datas, R.layout.item_consult_reply) {
            @Override
            public void convert(CommonViewHolder holder, int position, final ConsultReplyBean.ContentBean item) {
                Glide.with(context).load(Constants.URL_IMAGE_HEAD + item.getAddress()).error(R.mipmap.head_2).into((RoundedImageView) holder.getView(R.id.iv_user_head));
                holder.setText(R.id.tv_user_name, item.getNickname());
                holder.setText(R.id.tv_reply_time, item.getCreated_time());
                holder.setText(R.id.tv_reply_content, item.getContent());
                if (item.getType() == 0) {
                    holder.getView(R.id.tv_reply).setVisibility(View.VISIBLE);
                } else {
                    holder.getView(R.id.tv_reply).setVisibility(View.GONE);
                }
                holder.setTextListener(R.id.tv_reply, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog = new ReplyDialog(getContext(),R.style.transparentFrameWindowStyle, item.getNickname(), item.getId());
                        dialog.show();
                        dialog.setReplyListener(new ReplyDialog.OnReplyListener() {
                            @Override
                            public void reply(String consultId, String content) {
                                reply(consultId,content);
                            }
                        });
                    }
                });
            }
        };

        lvConsultReply.setAdapter(adapter);
    }

    /**
     * 获取未读消息数量
     */
    private void updateUnReadMessageNum(){
        String timestamp = SignUtils.getTimeStamp();
        String sign = Utils.getSign(
                "timestamp", timestamp,
                "type",String.valueOf(userType)
        );

        OkHttpUtils.post().url(Constants.CHANGE_MESSAGE_STATUS)
                .addParams("type",String.valueOf(userType))
                .addParams("timestamp",timestamp)
                .addParams("client_type","A")
                .addParams("sign",sign)
                .build().execute(new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
            }

            @Override
            public void onResponse(String response, int id) {
                try {
                    JSONObject jsonObject = new JSONObject(response);
                    if (jsonObject.getInt(Const.CONS_STR_CODE) == 1){
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * 回复
     * @param consultId
     * @param content
     */
    private void reply(String consultId, String content) {
        String timestamp = SignUtils.getTimeStamp();
            String sign = Utils.getSign("timestamp", timestamp,
                    "uuid", TianyiApplication.appCommonBean.getUuid(),
                    "phone", TianyiApplication.appCommonBean.getPhone(),
                    "type","0",
                    "rtype",String.valueOf(userType),
                    "parentid", consultId,
                    "content", content,
                    "id", TianyiApplication.appCommonBean.getId());
            OkHttpUtils.post().url(Constants.CONSULT_REPLY)
                    .addParams("uuid", TianyiApplication.appCommonBean.getUuid())
                    .addParams("phone", TianyiApplication.appCommonBean.getPhone())
                    .addParams("type","0")
                    .addParams("rtype",String.valueOf(userType))
                    .addParams("parentid", consultId)
                    .addParams("content", content)
                    .addParams("id", TianyiApplication.appCommonBean.getId())
                    .addParams("timestamp", timestamp)
                    .addParams("client_type", "A")
                    .addParams("sign", sign)
                    .build().execute(new StringCallback() {
                @Override
                public void onError(Call call, Exception e, int id) {

                }

                @Override
                public void onResponse(String response, int id) {
                    MyLog.e("luxc", response);
                    try {
                        JSONObject object = new JSONObject(response);
                        if (object.getInt(Const.CONS_STR_CODE) == 1) {
                            ((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                            ToastUtils.show("回复成功");
                            getData();
                            adapter.notifyDataSetChanged();
                        } else {
                            ToastUtils.show(object.getString("msg"));
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }
            });
    }

    /**
     * 获取资讯回复列表
     */
    private void getData() {
        String timestamp = SignUtils.getTimeStamp();
        String sign = Utils.getSign("timestamp", timestamp, "type",String.valueOf(userType),"uuid", TianyiApplication.appCommonBean.getUuid(),
                "phone", TianyiApplication.appCommonBean.getPhone(), "page", String.valueOf(page), "rows", String.valueOf(rows));

        OkHttpUtils.post().url(Constants.CONSULT_REPLY_LIST)
                .addParams("uuid", TianyiApplication.appCommonBean.getUuid())
                .addParams("phone", TianyiApplication.appCommonBean.getPhone())
                .addParams("timestamp", timestamp)
                .addParams("type",String.valueOf(userType))
                .addParams("sign", sign)
                .addParams("page", String.valueOf(page))
                .addParams("rows", String.valueOf(rows))
                .addParams("client_type","A")
                .build().execute(new AbstractConsultReplyCallBack() {

            @Override
            public void onBefore(Request request, int id) {
                super.onBefore(request, id);
                if (isRefresh) {
                    if (datas != null) {
                        datas.clear();
                    }
                }
            }

            @Override
            public void onAfter(int id) {
                super.onAfter(id);
                if (isRefresh) {
                    smartRefreshLayout.finishRefresh(500);
                } else {
                    smartRefreshLayout.finishLoadmore(1000);
                }
            }

            @Override
            public void onError(Call call, Exception e, int id) {
//                empty.setVisibility(View.VISIBLE);
            }

            @Override
            public void onResponse(ConsultReplyBean response, int id) {
                if (response.getCode() == 1) {
                    if (page == 1 && response.getContent().size() < 1) {
                        empty.setVisibility(View.VISIBLE);
                    } else {
                        empty.setVisibility(View.GONE);
                    }
                    datas.addAll(response.getContent());

                } else {
                    empty.setVisibility(View.VISIBLE);
                }
                adapter.notifyDataSetChanged();
            }
        });

    }
}
