package com.yst.tianyimember.activity.chat;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.provider.MediaStore;
import android.support.v4.content.FileProvider;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.view.ContextMenu;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.gyf.barlibrary.ImmersionBar;
import com.tencent.TIMConversation;
import com.tencent.TIMConversationType;
import com.tencent.TIMFriendshipManager;
import com.tencent.TIMManager;
import com.tencent.TIMMessage;
import com.tencent.TIMMessageDraft;
import com.tencent.TIMMessageStatus;
import com.tencent.TIMUserProfile;
import com.tencent.TIMValueCallBack;
import com.tencent.qcloud.presentation.event.RefreshEvent;
import com.tencent.qcloud.presentation.presenter.ChatPresenter;
import com.tencent.qcloud.presentation.viewfeatures.ChatView;
import com.tencent.qcloud.ui.ChatInput;
import com.tencent.qcloud.ui.TemplateTitle;
import com.tencent.qcloud.ui.VoiceSendingView;
import com.yst.tianyimember.R;
import com.yst.tianyimember.TianyiApplication;
import com.yst.tianyimember.adapter.chatadapter.ChatAdapter;
import com.yst.tianyimember.bean.ServerMemberInfoBean;
import com.yst.tianyimember.bean.chatmodel.AbstractMessage;
import com.yst.tianyimember.bean.chatmodel.CustomMessage;
import com.yst.tianyimember.bean.chatmodel.FileMessage;
import com.yst.tianyimember.bean.chatmodel.ImageMessage;
import com.yst.tianyimember.bean.chatmodel.MessageFactory;
import com.yst.tianyimember.bean.chatmodel.TextMessage;
import com.yst.tianyimember.bean.chatmodel.VideoMessage;
import com.yst.tianyimember.bean.chatmodel.VoiceMessage;
import com.yst.tianyimember.config.Const;
import com.yst.tianyimember.config.Constants;
import com.yst.tianyimember.utils.FileUtil;
import com.yst.tianyimember.utils.MediaUtil;
import com.yst.tianyimember.utils.MyLog;
import com.yst.tianyimember.utils.RecorderUtil;
import com.yst.tianyimember.utils.SignUtils;
import com.yst.tianyimember.utils.ToastUtils;
import com.yst.tianyimember.utils.Utils;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import okhttp3.Call;

/**
 * 聊天页面
 * @author lixiangchao
 * @version 3.2.1
 * @date 2017/07/06
 */
public class ChatActivity extends AppCompatActivity implements ChatView {

    private static final String TAG = "ChatActivity";
    public static String userImgUrl = "";
    public static String hunterImgUrl = "";
    private List<AbstractMessage> messageList = new ArrayList<AbstractMessage>();
    private ChatAdapter adapter;
    private ListView listView;
    private ChatPresenter presenter;
    private ChatInput input;
    private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 100;
    private static final int IMAGE_STORE = 200;
    private static final int FILE_CODE = 300;
    private static final int IMAGE_PREVIEW = 400;
    private boolean isSetServiceTime = false;
    private Uri fileUri;
    private VoiceSendingView voiceSendingView;
    private String identify;
    private String hunterId;
    private RecorderUtil recorder = new RecorderUtil();
    private TIMConversationType type;
    private String titleStr;
    private Handler handler = new Handler();
    private String downLoad = "/download";
    @BindView(R.id.chat_title)
    TemplateTitle title;

    public static void navToChat(Context context, String identify,String hunterId ,TIMConversationType type){
        Intent intent = new Intent(context, ChatActivity.class);
        intent.putExtra("identify", identify);
        intent.putExtra("type", type);
        intent.putExtra("hunter_id", hunterId);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (Build.VERSION.SDK_INT < Const.INTEGER_23) {
            ImmersionBar.with(this).statusBarColor(R.color.white).statusBarAlpha(0.2f).init();
        } else if (Build.VERSION.SDK_INT >= Const.INTEGER_23) {
            ImmersionBar.with(this).statusBarDarkFont(true).statusBarColor(R.color.white).init();
        }
        setContentView(R.layout.activity_chat);

        TIMConversation conversation = TIMManager.getInstance().getConversation(
                //会话类型：单聊
                TIMConversationType.C2C,
                //会话对方用户帐号
                identify);
        conversation.setReadMessage();
        ButterKnife.bind(this);
        TianyiApplication.instance.addActivity(ChatActivity.this);
        TIMFriendshipManager.getInstance().getSelfProfile(new TIMValueCallBack<TIMUserProfile>() {

            @Override
            public void onError(int code, String s) {
                //错误码code和错误描述desc，可用于定位请求失败原因
                //错误码code列表请参见错误码表
                MyLog.e("sss", "getSelfProfile failed: " + code + "  ----desc:" + s);
            }

            @Override
            public void onSuccess(TIMUserProfile result) {
                MyLog.e("sss", "getSelfProfile succ");
                MyLog.e("sss", "identifier: "
                        + result.getIdentifier() + " nickName: " + result.getNickName()
                        + " remark: " + result.getRemark() + " allow: "
                        + result.getAllowType() + " getFaceUrl:" + result.getFaceUrl());
            }
        });

        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        identify = getIntent().getStringExtra("identify");
        type = (TIMConversationType) getIntent().getSerializableExtra("type");
        hunterId = getIntent().getStringExtra("hunter_id") == null?"":getIntent().getStringExtra("hunter_id");
        presenter = new ChatPresenter(this, identify, type);
        input = (ChatInput) findViewById(R.id.input_panel);
        input.setChatView(this);
        adapter = new ChatAdapter(this, R.layout.item_message, messageList);
        listView = (ListView) findViewById(R.id.list);
        listView.setAdapter(adapter);
        listView.setTranscriptMode(ListView.TRANSCRIPT_MODE_NORMAL);
        listView.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        input.setInputMode(ChatInput.InputMode.NONE);
                        break;
                    default:
                        break;
                }
                return false;
            }
        });
        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
            private int firstItem;
            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {
                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE && firstItem == 0) {
                    //如果拉到顶端读取更多消息
                    presenter.getMessage(messageList.size() > 0 ? messageList.get(0).getMessage() : null);
                }
            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                firstItem = firstVisibleItem;
            }
        });
        registerForContextMenu(listView);
        switch (type) {
            case C2C:
///                title.setMoreImg(R.drawable.btn_person);
///                if (FriendshipInfo.getInstance().isFriend(identify)){
///                    title.setMoreImgAction(new View.OnClickListener() {
///                        @Override
///                        public void onClick(View v) {
///                            Intent intent = new Intent(ChatActivity.this, ProfileActivity.class);
///                            intent.putExtra("identify", identify);
///                            startActivity(intent);
///                        }
///                    });
///                    FriendProfile profile = FriendshipInfo.getInstance().getProfile(identify);
///                    title.setTitleText(titleStr = profile == null ? (identify.length() > 11 ? identify.substring(0, 11) : identify) : profile.getName());
///                    mTitleTv.setText(titleStr = profile == null ? (identify.length() > 11 ? identify.substring(0, 11) : identify) : profile.getName());
///                }else{
///                    title.setMoreImgAction(new View.OnClickListener() {
///                        @Override
///                        public void onClick(View v) {
///                            Intent person = new Intent(ChatActivity.this,AddFriendActivity.class);
///                            person.putExtra("id",identify);
///                            person.putExtra("name",identify);
///                            startActivity(person);
///                        }
///                    });
///                    titleStr = identify.length() > 11 ? identify.substring(0, 11) : identify;
//                }
///                titleStr = identify.length() > 11 ? identify.substring(0, 11) : identify;
                break;
            case Group:
///                title.setMoreImg(R.drawable.btn_group);
///                title.setMoreImgAction(new View.OnClickListener() {
///                    @Override
///                    public void onClick(View v) {
///                        Intent intent = new Intent(ChatActivity.this, GroupProfileActivity.class);
///                        intent.putExtra("identify", identify);
///                        startActivity(intent);
///                    }
///                });
///                title.setTitleText(GroupInfo.getInstance().getGroupName(identify));
                break;
            default:
                break;
        }

        //获取用户资料
        TIMFriendshipManager.getInstance().getUsersProfile(getUserList(identify), new TIMValueCallBack<List<TIMUserProfile>>(){
            @Override
            public void onError(int code, String s) {
                //错误码code和错误描述desc，可用于定位请求失败原因
                //错误码code列表请参见错误码表
                MyLog.e("sss", "getUsersProfile failed: " + code + " desc:" + s);
            }

            @Override
            public void onSuccess(List<TIMUserProfile> result) {
                MyLog.e("sss", "getUsersProfile succ");
                if(result.size() > 0) {
                    TIMUserProfile res = result.get(0);
                    hunterImgUrl = res.getFaceUrl();
                    MyLog.e("sss", "nickName is null = "+(res.getNickName()== null) +", nickName is '' = "+"".equals(res.getNickName()) +"  ,nickName is empty = "+TextUtils.isEmpty(res.getNickName()));
                    if(res.getNickName() == null || "".equals(res.getNickName()) || TextUtils.isEmpty(res.getNickName())) {
                        title.setTitleText("匿名用户");
                        titleStr = "匿名用户";
                    } else {
                        title.setTitleText(res.getNickName());
                        titleStr = res.getNickName();
                    }
                } else {
                    title.setTitleText("匿名用户");
                    titleStr = "匿名用户";
                }
                RefreshEvent.getInstance().onRefresh();
            }
        });

        voiceSendingView = (VoiceSendingView) findViewById(R.id.voice_sending);
        presenter.start();
    }

    @Override
    protected void onPause(){
        super.onPause();
        //退出聊天界面时输入框有内容，保存草稿
        if (input.getText().length() > 0){
            TextMessage message = new TextMessage(input.getText());
            presenter.saveDraft(message.getMessage());
        }else{
            presenter.saveDraft(null);
        }
        RefreshEvent.getInstance().onRefresh();
        presenter.readMessages();
        MediaUtil.getInstance().stop();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        presenter.stop();
        // 如果有发送消息 设置服务时间
        if (isSetServiceTime){
            setServiceTime();
        }
    }

    /**
     * 显示消息
     *
     * @param message
     */
    @Override
    public void showMessage(TIMMessage message) {
        if (message == null) {
            adapter.notifyDataSetChanged();
        } else {
            AbstractMessage mMessage = MessageFactory.getMessage(message);
            if (mMessage != null) {
                if (mMessage instanceof CustomMessage){
                    CustomMessage.Type messageType = ((CustomMessage) mMessage).getType();
                    switch (messageType){
                        case TYPING:
                            TemplateTitle title = (TemplateTitle) findViewById(R.id.chat_title);
                            title.setTitleText(getString(R.string.chat_typing));
                            handler.removeCallbacks(resetTitle);
                            handler.postDelayed(resetTitle,3000);
                            break;
                        default:
                            break;
                    }
                }else{
                    if (messageList.size()==0){
                        mMessage.setHasTime(null);
                    }else{
                        mMessage.setHasTime(messageList.get(messageList.size()-1).getMessage());
                    }
                    messageList.add(mMessage);
                    adapter.notifyDataSetChanged();
                    listView.setSelection(adapter.getCount()-1);
                }
            }
        }
    }

    /**
     * 显示消息
     *
     * @param messages
     */
    @Override
    public void showMessage(List<TIMMessage> messages) {
        int newMsgNum = 0;
        for (int i = 0; i < messages.size(); ++i){
            AbstractMessage mMessage = MessageFactory.getMessage(messages.get(i));
            if (mMessage == null || messages.get(i).status() == TIMMessageStatus.HasDeleted) {
                continue;
            }

            if(mMessage instanceof CustomMessage){
                if(((CustomMessage) mMessage).getType() == CustomMessage.Type.TYPING || ((CustomMessage) mMessage).getType() == CustomMessage.Type.INVALID){
                    continue;
                }
            }
            ++newMsgNum;
            if (i != messages.size() - 1){
                mMessage.setHasTime(messages.get(i+1));
                messageList.add(0, mMessage);
            }else{
                mMessage.setHasTime(null);
                messageList.add(0, mMessage);
            }
        }
        adapter.notifyDataSetChanged();
        listView.setSelection(newMsgNum);
    }

    /**
     * 清除所有消息，等待刷新
     */
    @Override
    public void clearAllMessage() {
        messageList.clear();
    }

    /**
     * 发送消息成功
     *
     * @param message 返回的消息
     */
    @Override
    public void onSendMessageSuccess(TIMMessage message) {
        MyLog.e("luxc","onSendMessageSuccess");
        isSetServiceTime = true;
        showMessage(message);
    }

    /**
     * 设置服务时间
     */
    private void setServiceTime() {
        String timestamp = SignUtils.getTimeStamp();
        String sign = Utils.getSign("timestamp",timestamp,
                "hunterId",hunterId,
                "uuid",TianyiApplication.appCommonBean.getUuid()
        ,"phone",TianyiApplication.appCommonBean.getPhone());

        OkHttpUtils.post().url(Constants.SET_SERVER_TIME)
                .addParams("timestamp",timestamp)
                .addParams("uuid",TianyiApplication.appCommonBean.getUuid())
                .addParams("phone",TianyiApplication.appCommonBean.getPhone())
                .addParams("hunterId",hunterId)
                .addParams("client_type","A")
                .addParams("sign",sign)
                .build().execute(new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                MyLog.e("luxc","set service time  error");
            }

            @Override
            public void onResponse(String response, int id) {
                MyLog.e("luxc","set service time  success");
            }
        });
    }

    /**
     * 发送消息失败
     *
     * @param code 返回码
     * @param desc 返回描述
     */
    @Override
    public void onSendMessageFail(int code, String desc, TIMMessage message) {
        long id = message.getMsgUniqueId();
        for (AbstractMessage msg : messageList){
            if (msg.getMessage().getMsgUniqueId() == id){
                switch (code){
                    case 80001:
                        //发送内容包含敏感词
                        msg.setDesc(getString(R.string.chat_content_bad));
                        adapter.notifyDataSetChanged();
                        break;
                    default:
                        break;
                }
            }
        }
    }

    /**
     * 发送图片消息
     */
    @Override
    public void sendImage() {
        Intent intentAlbum = new Intent("android.intent.action.GET_CONTENT");
        intentAlbum.setType("image/*");
        startActivityForResult(intentAlbum, IMAGE_STORE);
    }

    /**
     * 发送照片消息
     */
    @Override
    public void sendPhoto() {
        /*获取当前系统的android版本号*/
        int currentapiVersion = Build.VERSION.SDK_INT;
///        if (currentapiVersion >= 24){
///            Toastutils.show("暂不支持7.0及以上版本手机拍照");
///            return;
///        }
        Intent intentPhoto = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (intentPhoto.resolveActivity(getPackageManager()) != null) {
            File tempFile = FileUtil.getTempFile(FileUtil.FileType.IMG);
            if (tempFile != null) {
                MyLog.e("currentapiVersion","currentapiVersion====>"+currentapiVersion);
                if (currentapiVersion < Const.INTEGER_24){
                    fileUri = Uri.fromFile(tempFile);
                } else {
                    ContentValues contentValues = new ContentValues(1);
                    contentValues.put(MediaStore.Images.Media.DATA, tempFile.getAbsolutePath());
///                    fileUri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);
///                    grantUriPermission("com.yst.retailstore", fileUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
                    /**这里进行替换uri的获得方式*/
                    fileUri = FileProvider.getUriForFile(ChatActivity.this, "com.yst.tianyimember.fileprovider", tempFile);
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                        //添加这一句表示对目标应用临时授权该Uri所代表的文件
                        intentPhoto.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
///                        intent_photo.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
                    }
                }
            }
            intentPhoto.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);
            startActivityForResult(intentPhoto, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
        }
    }

    /**
     * 发送文本消息
     */
    @Override
    public void sendText() {
        AbstractMessage message = new TextMessage(input.getText());
        presenter.sendMessage(message.getMessage());
        input.setText("");
    }

    /**
     * 发送文件
     */
    @Override
    public void sendFile() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        startActivityForResult(intent, FILE_CODE);
    }


    /**
     * 开始发送语音消息
     */
    @Override
    public void startSendVoice() {
        MyLog.e("sss", "start send voice ============ ");
        voiceSendingView.setVisibility(View.VISIBLE);
        voiceSendingView.showRecording();
        recorder.startRecording();
    }

    /**
     * 结束发送语音消息
     */
    @Override
    public void endSendVoice() {
        voiceSendingView.release();
        voiceSendingView.setVisibility(View.GONE);
        recorder.stopRecording();
        if (recorder.getTimeInterval() < 1) {
            Toast.makeText(this, getResources().getString(R.string.chat_audio_too_short), Toast.LENGTH_SHORT).show();
        } else {
            AbstractMessage message = new VoiceMessage(recorder.getTimeInterval(), recorder.getFilePath());
            presenter.sendMessage(message.getMessage());
        }
    }

    /**
     * 发送小视频消息
     *
     * @param fileName 文件名
     */
    @Override
    public void sendVideo(String fileName) {
        AbstractMessage message = new VideoMessage(fileName);
        presenter.sendMessage(message.getMessage());
    }

    /**
     * 结束发送语音消息
     */
    @Override
    public void cancelSendVoice() {
        voiceSendingView.showCancel();
        voiceSendingView.setVisibility(View.GONE);

    }

    /**
     * 正在发送
     */
    @Override
    public void sending() {
        if (type == TIMConversationType.C2C){
            AbstractMessage message = new CustomMessage(CustomMessage.Type.TYPING);
            presenter.sendOnlineMessage(message.getMessage());
        }
    }

    /**
     * 显示草稿
     */
    @Override
    public void showDraft(TIMMessageDraft draft) {
        input.getText().append(TextMessage.getString(draft.getElems(), this));
    }


    @Override
    public void onCreateContextMenu(ContextMenu menu, View v,
                                   ContextMenu.ContextMenuInfo menuInfo) {
        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
        AbstractMessage message = messageList.get(info.position);
        menu.add(0, 1, Menu.NONE, getString(R.string.chat_del));
        if (message.isSendFail()){
            menu.add(0, 2, Menu.NONE, getString(R.string.chat_resend));
        }
        if (message instanceof ImageMessage || message instanceof FileMessage){
            menu.add(0, 3, Menu.NONE, getString(R.string.chat_save));
        }
    }

    @Override
    public boolean onContextItemSelected(MenuItem item) {
        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
        AbstractMessage message = messageList.get(info.position);
        switch (item.getItemId()) {
            case 1:
                message.remove();
                messageList.remove(info.position);
                adapter.notifyDataSetChanged();
                break;
            case 2:
                messageList.remove(message);
                presenter.sendMessage(message.getMessage());
                break;
            case 3:
                message.save();
                break;
            default:
                break;
        }
        return super.onContextItemSelected(item);
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {
            if (resultCode == RESULT_OK && fileUri != null) {
                showImagePreview(fileUri.getPath());
                MyLog.e("sss", "uri === " + fileUri.getPath());
            }
        } else if (requestCode == IMAGE_STORE) {
            if (resultCode == RESULT_OK && data != null) {
                showImagePreview(FileUtil.getFilePath(this, data.getData()));
            }

        } else if (requestCode == FILE_CODE) {
            if (resultCode == RESULT_OK) {
                sendFile(FileUtil.getFilePath(this, data.getData()));
            }
        } else if (requestCode == IMAGE_PREVIEW){
            if (resultCode == RESULT_OK) {
                boolean isOri = data.getBooleanExtra("isOri",false);
                String path = data.getStringExtra("path");
                File file = new File(path);
                if (file.exists() && file.length() > 0){
                    if (file.length() > Const.INTEGER_1024 * Const.INTEGER_1024 * Const.INTEGER_10){
                        Toast.makeText(this, getString(R.string.chat_file_too_large),Toast.LENGTH_SHORT).show();
                    }else{
                        AbstractMessage message = new ImageMessage(path,isOri);
                        presenter.sendMessage(message.getMessage());
                    }
                }else{
                    Toast.makeText(this, getString(R.string.chat_file_not_exist),Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    private void showImagePreview(String path){
        if (path == null) {
            return;
        }
        Intent intent = new Intent(this, ImagePreviewActivity.class);
        MyLog.e("sss", "path === " + path);
        MyLog.e("sss", "path === " + (new File(path)).exists());
        if (path.startsWith(downLoad)) {
            path = path.substring(10);
        }
        intent.putExtra("path", path);
        //判读版本是否在7.0以上
        if(Build.VERSION.SDK_INT >= Const.INTEGER_24) {
            //添加这一句表示对目标应用临时授权该Uri所代表的文件
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        }
        MyLog.e("sss", "path === " + path);
        MyLog.e("sss", "path === " + (new File(path)).exists());
        startActivityForResult(intent, IMAGE_PREVIEW);
    }

    private void sendFile(String path){
        if (path == null) {
            return;
        }
        File file = new File(path);
        if (file.exists()){
            if (file.length() > Const.INTEGER_1024 * Const.INTEGER_1024 * Const.INTEGER_10){
                Toast.makeText(this, getString(R.string.chat_file_too_large),Toast.LENGTH_SHORT).show();
            }else{
                AbstractMessage message = new FileMessage(path);
                presenter.sendMessage(message.getMessage());
            }
        }else{
            Toast.makeText(this, getString(R.string.chat_file_not_exist),Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * 将标题设置为对象名称
     */
    private Runnable resetTitle = new Runnable() {
        @Override
        public void run() {
            TemplateTitle title = (TemplateTitle) findViewById(R.id.chat_title);
            title.setTitleText(titleStr);
        }
    };


    private void getServerMemberInfo() {
        String timestamp = SignUtils.getTimeStamp();
        String sign = Utils.getSign(
                "uuid", TianyiApplication.appCommonBean.getUuid(),
                "phone", TianyiApplication.appCommonBean.getPhone(),
                "timestamp", timestamp);
        OkHttpUtils.post().url(Constants.SERVERMEMBER_INFO)
                .addParams("uuid", TianyiApplication.appCommonBean.getUuid())
                .addParams("phone", TianyiApplication.appCommonBean.getPhone())
                .addParams("timestamp", timestamp)
                .addParams("sign", sign)
                .addParams("client_type", "A")
                .build().execute(new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                ToastUtils.show(getString(R.string.app_on_request_error_msg));
                MyLog.e("ServerMemberInfo", "getServerMemberInfo____onerror___" + e);
            }

            @Override
            public void onResponse(String response, int id) {
                MyLog.e("ServerMemberInfo", "getServerMemberInfo____onResponse___" + response);
                Gson gson = new Gson();
                ServerMemberInfoBean serverMemberInfoBean = gson.fromJson(response, ServerMemberInfoBean.class);
                if (serverMemberInfoBean != null && Const.STR1.equals(serverMemberInfoBean.getCode()) && serverMemberInfoBean.getContent() != null) {
                    ServerMemberInfoBean.ContentBean content = serverMemberInfoBean.getContent();
//                    setServerMemberInfo(content);
                    userImgUrl = content.getLogoImg();

                }else{
                    ToastUtils.show(serverMemberInfoBean.getMsg());
                }
            }
        });
    }

    /**
     * 待获取用户资料的用户列表
     * @param uid
     * @return
     */
    private List<String> getUserList(String uid) {
        List<String> users = new ArrayList<String>();
        users.clear();
        users.add(uid);
        return users;
    }
}
