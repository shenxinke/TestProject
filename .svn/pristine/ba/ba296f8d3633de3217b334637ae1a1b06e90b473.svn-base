package com.yst.tianyimember.utils;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;

import com.yst.tianyimember.TianyiApplication;
import com.yst.tianyimember.bean.information.SingleImageModel;
import com.yst.tianyimember.config.Const;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *  本地相册图片类
 *
 * @author lixiangchao
 * @version 3.2.1
 * @date 2017/9/21.
 */
public class PhotoUtil {

    /**
     * 自定义图片名，获取照片的file
     */
    public static File createImgFile() {
        //创建文件，确定文件名
        String fileName = "img_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".jpg";
        File dir = TianyiApplication.getInstance().getFilesDir();
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            dir = TianyiApplication.getInstance().getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        }
        File tempFile = new File(dir, fileName);
        try {
            if (tempFile.exists()) {
                tempFile.delete();
            }
            tempFile.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return tempFile;
    }

    /**
     * 将图片添加进手机相册
     * @param photoUri
     */
    public static void galleryAddPic(Uri photoUri) {
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        mediaScanIntent.setData(photoUri);
        TianyiApplication.getInstance().sendBroadcast(mediaScanIntent);
    }

    /**
     * 图片压缩
     */
    public static Bitmap compressImageBitmap(String photoPath, int ivWidth, int ivHeight) {

        //根据图片路径，获取bitmap的宽和高
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(photoPath, options);
        int photoWidth = options.outWidth;
        int photoHeight = options.outHeight;

        //获取缩放比例
        int inSampleSize = 1;
        if (photoWidth > ivWidth || photoHeight > ivHeight) {
            int widthRatio = Math.round((float) photoWidth / ivWidth);
            int heightRatio = Math.round((float) photoHeight / ivHeight);
            inSampleSize = Math.max(widthRatio, heightRatio);
        }

        //使用现在的options获取Bitmap
        options.inSampleSize = inSampleSize;
        options.inJustDecodeBounds = false;
        Bitmap bitmap = BitmapFactory.decodeFile(photoPath, options);
        return bitmap;
    }
    /**
     * 图片压缩并返回路径
     */
    public static String compressBitmap(String photoPath, int ivWidth, int ivHeight) {
        return savePngAfter(compressImageBitmap(photoPath, ivWidth, ivHeight), System.currentTimeMillis()+".jpg");
    }

    /**
     * 镜像
     */
    public static Bitmap convertBmp(Bitmap bmp) {
        int w = bmp.getWidth();
        int h = bmp.getHeight();

        Matrix matrix = new Matrix();
        // 镜像水平翻转
        matrix.postScale(-1, 1);
        Bitmap convertBmp = Bitmap.createBitmap(bmp, 0, 0, w, h, matrix, false);

        return convertBmp;
    }

    /**
     * 获取手机相册所有图片
     */
    public static List<SingleImageModel> getAllImage(Activity activity, Handler handler) {

        List<SingleImageModel> allImages = new ArrayList<>();
        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        ContentResolver contentResolver = activity.getContentResolver();
        //获取jpeg和png格式的文件，并且按照时间进行倒序
        Cursor cursor = contentResolver.query(uri, null, MediaStore.Images.Media.MIME_TYPE + "=\"image/jpeg\" or " +
                MediaStore.Images.Media.MIME_TYPE + "=\"image/png\"", null, MediaStore.Images.Media.DATE_MODIFIED + " desc");
        if (cursor != null) {
            allImages.clear();
            while (cursor.moveToNext()) {
                SingleImageModel singleImageModel = new SingleImageModel();
                singleImageModel.path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));
                try {
                    singleImageModel.date = Long.parseLong(cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATE_MODIFIED)));
                } catch (NumberFormatException e) {
                    singleImageModel.date = System.currentTimeMillis();
                }
                try {
                    singleImageModel.id = Long.parseLong(cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID)));
                } catch (NumberFormatException e) {
                    singleImageModel.id = 0;
                }
                allImages.add(singleImageModel);
            }
            Message message = Message.obtain();
            message.what = 2;
            handler.sendMessage(message);
        }
        return allImages;
    }

    /**
     * bitmap 保存png
     */
    public static String savePngAfter(Bitmap bitmap, String name) {
        File file = new File(TianyiApplication.getInstance().getExternalFilesDir(Environment.DIRECTORY_PICTURES), name);
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        FileOutputStream out = null;
        try {
            int options = 100;
            bitmap.compress(Bitmap.CompressFormat.JPEG, options, os);
            //大于123KB就一直压缩
            while (os.toByteArray().length / Const.INTEGER_1024 > Const.INTEGER_123) {
                os.reset();
                options -= 10;
                bitmap.compress(Bitmap.CompressFormat.JPEG, options, os);
            }
            out = new FileOutputStream(file);
            out.write(os.toByteArray());
            out.flush();
            return file.getAbsolutePath();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    os.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }
}
