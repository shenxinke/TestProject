package com.yst.tianyimember.dialog;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;

import com.yst.tianyimember.R;
import com.yst.tianyimember.adapter.KeyBoardAdapter;
import com.yst.tianyimember.config.Const;
import com.yst.tianyimember.utils.MyLog;
import com.yst.tianyimember.view.VirtualKeyboardView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * 设置支付密码弹框
 *
 * @author jiaofan
 * @version 1.0.1
 * @date 2018/3/22
 */

public abstract class AbstractEditPwdDialog {
    public Dialog dialog;
    private VirtualKeyboardView virtualKeyboardView;
    /**
     * 用数组保存6个TextView，为什么用数组？
     */
    private TextView[] tvList;
    private Context mContext;
    private ImageView[] imgList;
    private GridView gridView;
    private ArrayList<Map<String, String>> valueList;
    /**
     * 用于记录当前输入密码格位置
     */
    private int currentIndex = -1;
    private boolean isHide = false;

    private TextView title;
    private TextView forget;

    public AbstractEditPwdDialog(Activity activity) {
        if (dialog == null) {
            getDialog(activity);
        }
    }

    private void getDialog(Activity activity) {
        this.mContext = activity;
        View view = activity.getLayoutInflater().inflate(R.layout.dialog_setpwd, null);
        dialog = new Dialog(activity, R.style.transaction_psw_dailog_dimenabled);
        dialog.setContentView(view);
        title = (TextView) view.findViewById(R.id.dialog_title);
        forget = (TextView) view.findViewById(R.id.dialog_forget);
        ImageView close = (ImageView) view.findViewById(R.id.dialog_close);

        forget.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog.dismiss();
                forgetClick();
            }
        });
        close.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog.dismiss();
            }
        });

        Window dialogWindow = dialog.getWindow();
        WindowManager.LayoutParams lp = dialogWindow.getAttributes();
        lp.width = ViewGroup.LayoutParams.MATCH_PARENT;
        lp.height = ViewGroup.LayoutParams.WRAP_CONTENT;
        dialogWindow.setAttributes(lp);

        virtualKeyboardView = (VirtualKeyboardView) view.findViewById(R.id.virtualKeyboardView);
        gridView = virtualKeyboardView.getGridView();
        initValueList();
        initView(view);
        setupView();
    }

    /**
     * 获取弹框中的view
     *
     * @return 忘记密码的TextView对象
     */
    public TextView getTextView() {
        return forget;
    }

    /**
     * 设置标题文字
     *
     * @param str 标题文字
     */
    public void setText(String str) {
        title.setText(str);
    }

    /**
     * 忘记密码点击事件
     */
    public abstract void forgetClick();

    public void showDialog() {
        dialog.show();
    }
    public void dismissDialog() {
        dialog.dismiss();
    }

    private void setupView() {
        // 这里、重新为数字键盘gridView设置了Adapter
        KeyBoardAdapter keyBoardAdapter = new KeyBoardAdapter(mContext, valueList);
        gridView.setAdapter(keyBoardAdapter);
        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                //点击0~9按钮
                if (position < Const.INTEGER_11 && position != Const.INTEGER_9) {
                    //判断输入位置————要小心数组越界
                    if (currentIndex >= -1 && currentIndex < Const.INTEGER_5) {
                        ++currentIndex;
                        tvList[currentIndex].setText(valueList.get(position).get("name"));
                        if (isHide) {
                            tvList[currentIndex].setVisibility(View.INVISIBLE);
                            imgList[currentIndex].setVisibility(View.VISIBLE);
                        }
                    }
                } else {
                    //点击退格键
                    if (position == Const.INTEGER_11) {
                        //判断是否删除完毕————要小心数组越界
                        if (currentIndex - 1 >= -1) {
                            tvList[currentIndex].setText("");
                            if (isHide) {
                                tvList[currentIndex].setVisibility(View.VISIBLE);
                                imgList[currentIndex].setVisibility(View.INVISIBLE);
                            }
                            currentIndex--;
                        }
                    }
                }
            }
        });
    }

    private void initView(View view) {
        tvList = new TextView[6];
        imgList = new ImageView[6];

        tvList[0] = (TextView) view.findViewById(R.id.tv_pass1);
        tvList[1] = (TextView) view.findViewById(R.id.tv_pass2);
        tvList[2] = (TextView) view.findViewById(R.id.tv_pass3);
        tvList[3] = (TextView) view.findViewById(R.id.tv_pass4);
        tvList[4] = (TextView) view.findViewById(R.id.tv_pass5);
        tvList[5] = (TextView) view.findViewById(R.id.tv_pass6);

        imgList[0] = (ImageView) view.findViewById(R.id.img_pass1);
        imgList[1] = (ImageView) view.findViewById(R.id.img_pass2);
        imgList[2] = (ImageView) view.findViewById(R.id.img_pass3);
        imgList[3] = (ImageView) view.findViewById(R.id.img_pass4);
        imgList[4] = (ImageView) view.findViewById(R.id.img_pass5);
        imgList[5] = (ImageView) view.findViewById(R.id.img_pass6);
    }

    private void initValueList() {
        valueList = new ArrayList<>();
        // 初始化按钮上应该显示的数字
        for (int i = 1; i < Const.INTEGER_13; i++) {
            Map<String, String> map = new HashMap<>(16);
            if (i < 10) {
                map.put("name", String.valueOf(i));
            } else if (i == 10) {
                map.put("name", "");
            } else if (i == 11) {
                map.put("name", String.valueOf(0));
            } else if (i == 12) {
                map.put("name", "");
            }
            valueList.add(map);
        }
    }

    /**
     * 设置监听方法，在第6位输入完成后触发
     *
     * @param pass
     */
    public void setOnFinishInput(final OnPasswordInputFinish pass) {
        tvList[5].addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (s.toString().length() == 1) {
                    //每次触发都要先将strPassword置空，再重新获取，避免由于输入删除再输入造成混乱
                    String strPassword = "";
                    for (int i = 0; i < Const.INTEGER_6; i++) {
                        strPassword += tvList[i].getText().toString().trim();
                    }
                    MyLog.e("zzz", "strPassword :"+strPassword);
                    //接口中要实现的方法，完成密码输入完成后的响应逻辑
                    pass.inputFinish(strPassword);
                }
            }
        });
    }

    /**
     * 密码输入完成回调事件
     */
    public interface OnPasswordInputFinish {
        /**
         * 输入最后位的监听
         *
         * @param password 密码框
         */
        void inputFinish(String password);
    }

    /**
     * 清空密码
     */
    public void cleanPassword(){
        tvList[0].setText("");
        tvList[1].setText("");
        tvList[2].setText("");
        tvList[3].setText("");
        tvList[4].setText("");
        tvList[5].setText("");
        currentIndex=-1;
    }
}
